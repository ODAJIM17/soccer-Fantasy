<div class="mb-3">
    <label class="form-label">@Label</label>
    <div class="input-group">
        <input type="text"
               class="form-control"
               placeholder="@Localizer["SelectFile"]"
               readonly="readonly"
               value="@fileName" />
        <label class="input-group-btn">
            <span class="btn btn-primary">
                @Localizer["Search"]<InputFile OnChange="OnChange" class="d-none" accept=".jpg,.jpeg,.png" />
            </span>
        </label>
    </div>
</div>

<div>
    @if (imageBase64 is not null)
    {
        <div>
            <div style="margin: 10px">
                <img src="data:image/jpeg;base64,@imageBase64" style="height:200px;" />
            </div>
        </div>
    }

    @if (ImageURL is not null && ImageURL.StartsWith("http"))
    {
        <div>
            <div style="margin: 10px">
                <img src="@ImageURL" style="height:200px;" />
            </div>
        </div>
    }
</div>

@code {

    private string? imageBase64;
    private string? fileName;

    [Inject] private IStringLocalizer<Literals> Localizer { get; set; } = null!;

    [Parameter] public string? Label { get; set; }
    [Parameter] public string? ImageURL { get; set; }
    [Parameter] public EventCallback<string> ImageSelected { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (string.IsNullOrWhiteSpace(Label))
        {
            Label = Localizer["Image"];
        }
    }

    private async Task OnChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            fileName = file.Name;

            var arrBytes = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(arrBytes);
            imageBase64 = Convert.ToBase64String(arrBytes);
            ImageURL = null;
            await ImageSelected.InvokeAsync(imageBase64);
            StateHasChanged();
        }
    }

}