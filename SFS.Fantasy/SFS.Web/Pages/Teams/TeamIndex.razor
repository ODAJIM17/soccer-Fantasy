@page "/teams"

<h3>@Localizer["Teams"]</h3>

<div class="mb-3">
    <a class="btn btn-sm btn-primary" href="/teams/create">@Localizer["New"] @Localizer["Team"]</a>
</div>

<GenericList MyList="Teams">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>@Localizer["Team"]</th>
                    <th># @Localizer["Image"]</th>
                    <th># @Localizer["Country"]</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var team in Teams!)
                {
                    <tr>
                        <td>
                            @team.Name
                        </td>
                        <td>
                            <img src="@team.ImageFull" style="width:80px;" />
                        </td>
                        <td>
                            @team.Country.Name
                        </td>

                        <td>
                            <a class="btn btn-warning" href="/teams/edit/@team.Id">@Localizer["Edit"]</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(team))>@Localizer["Delete"]</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {

    [Inject] private ITeamRepository Repository { get; set; } = null!;
    [Inject] private IStringLocalizer<Literals> Localizer { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private SweetAlertService SweetAlertService { get; set; } = null!;

    private List<Team>? Teams { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();

    }

    private async Task LoadAsync()
    {
        Teams = await Repository.GetAllAsync();
    }

    private async Task DeleteAsync(Team team)
    {
        var result = await SweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = Localizer["Confirmation"],
            Text = string.Format(Localizer["DeleteConfirm"], Localizer["Team"], team.Name),
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = Localizer["Cancel"]
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }
        try
        {
            await Repository.DeleteByIdAsync(team);
        }
        catch (Exception ex)
        {

            await SweetAlertService.FireAsync(Localizer["Error"], ex.Message.ToString(), SweetAlertIcon.Error);
        }

        await LoadAsync();
        var toast = SweetAlertService.Mixin(new SweetAlertOptions
        {
            Toast = true,
            Position = SweetAlertPosition.BottomEnd,
            ShowConfirmButton = true,
            Timer = 3000,
            ConfirmButtonText = Localizer["Yes"]
        });
        toast.FireAsync(icon: SweetAlertIcon.Success, message: Localizer["RecordDeletedOk"]);
    }

}