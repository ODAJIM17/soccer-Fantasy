<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>@Localizer["Country"]:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Country.Name" />
            <ValidationMessage For="@(() => Country.Name)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">@Localizer["SaveChanges"]</button>
    @*<button class="btn btn-success" @onclick="ReturnAction">@Localizer["Return"]</button>*@
    <a href="/countries" class="btn btn-success">@Localizer["Return"]</a>
</EditForm>

@code {

    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Country);
    }

    [EditorRequired, Parameter] public Country Country { get; set; } = null!;
    [EditorRequired, Parameter] public EventCallback OnValidSubmit { get; set; }
    [EditorRequired, Parameter] public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    [Inject] private SweetAlertService SweetAlertService { get; set; } = null!;
    [Inject] private IStringLocalizer<Literals> Localizer { get; set; } = null!;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited || FormPostedSuccessfully)
        {
            return;
        }

        var result = await SweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = Localizer["Confirmation"],
            Text = Localizer["LeaveAndLoseChanges"],
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true
        });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

}